#!/usr/bin/python
# -*- coding: UTF-8 -*-
import os
import re
import sys
import subprocess


www_dir     = "/var/www"
apache_conf = "/etc/apache2/sites-available/default"
apache_pid  = "/var/run/apache2.pid"

eol = os.linesep

"""
<Macro VHost $domain $dir>
    <VirtualHost *:80>
        ServerAdmin webmaster@localhost
        ServerName $domain
        ServerAlias www.$domain
        DocumentRoot $dir
        SetEnv DEBUG_SERVER 1

        <Directory />
            Options FollowSymLinks
            AllowOverride None
        </Directory>

        <Directory "$dir">
            Options Indexes FollowSymLinks MultiViews
            AllowOverride All
            Order allow,deny
            allow from all
        </Directory>

        ScriptAlias /cgi-bin/ $dir/cgi-bin/
        <Directory "$dir/cgi-bin">
            AllowOverride None
            Options +ExecCGI +MultiViews +SymLinksIfOwnerMatch
            Order allow,deny
            Allow from all
        </Directory>

        ErrorLog ${APACHE_LOG_DIR}/error-$domain.log
        CustomLog ${APACHE_LOG_DIR}/access-$domain.log common

        # ErrorLog  $dir/logs/error.log
        # CustomLog $dir/logs/access.log common

        # Possible values include: debug, info, notice, warn, error, crit,
        # alert, emerg.
        LogLevel warn

        Include $dir/*.host.conf
    </VirtualHost>
</Macro>
"""



"""
ACTION Functions
===================================
"""

def act_help():
    print "Usage: <command>"
    print "\nCommands:"
    print "    help     справка"
    print "    update   обновить список хостов и перезапустить apache (only root)"
    print "    list     список принятых хостов"

def act_list():
    print "List"
    return 1

def act_update():
    hosts = find_hosts(www_dir)
    config = vhost_content(apache_conf, hosts)

    if is_root() == 0:
        print "Error! root only\n"
        print config
        return

    print "Updating Apache2 virtual hosts using /var/www catalogs"
    open(apache_conf, "w").write(config)

    # print "Hosts successfully added:\n * {0}.loc\n".format(".loc\n * ".join(hosts))

    if os.path.exists(apache_pid):
        print "Apache2 restart"
        os.system("service apache2 restart")


"""
PUBLIC Functions
===================================
"""

def find_hosts(www_dir):
    hosts = []
    html_dirs = ["www", "public_html", "htdocs", "html"]

    for name in os.listdir(www_dir):
        h = {
            'DocumentRoot': os.path.join(www_dir, name),
            'ServerName': name,
            'Use': ''
        }
        if os.path.isdir(h['DocumentRoot']):
            for dname in html_dirs:
                droot = os.path.join(h['DocumentRoot'], dname)
                if os.path.isdir(droot):
                    h['DocumentRoot'] = droot
                    break
            h['Use'] = "Use VHost {0} {1}".format(h['DocumentRoot'], h['ServerName'])
            hosts.append(h)
    return hosts

def vhost_content(vhost_filename, hosts):
    content = open(vhost_filename, "r").read()
    our_pattern = r"#\n+#\s*Vhosts\s+begin.+?#\s*Vhosts\s+end\n+#"
    content = re.sub(our_pattern, "", content, flags=re.DOTALL)
    content = content.strip()

    if not re.match('Macro VHost', content):
        return content

    huse = []
    for h in hosts:
        huse.append(h['Use'])
    content += "\n\n#\n# Vhosts begin\n#\n{0}\n#\n# Vhosts end\n#\n".format("\n".join(huse))

    return content

def is_root():
    PIPE = subprocess.PIPE
    p = subprocess.Popen('id -u', shell=True, stdin=PIPE, stdout=PIPE, stderr=subprocess.STDOUT)
    id = p.stdout.read().strip()
    if id == "0":
        return 1
    return 0

if __name__ == "__main__":
    try:
        act = "help"
        if len(sys.argv) > 1:
            act = sys.argv[1]

        if act == "update":
            act_update()
        if act == "list":
            act_list()
        if act == "help":
            act_help()

    except BaseException as e:
        if "{0}".format(e) == "":
            pass
        else:
            print "Error parse: {0}!".format(e)
            sys.exit(1)
